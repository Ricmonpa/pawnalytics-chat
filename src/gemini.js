import { GoogleGenerativeAI } from '@google/generative-ai';
import { 
  analyzeObesityWithRoboflow, 
  analyzeCataractsWithRoboflow, 
  analyzeDysplasiaWithRoboflow,
  autoAnalyzeWithRoboflow,
  formatRoboflowResults,
  getRoboflowStatus
} from './roboflow.js';

// Configuraci√≥n de Gemini
const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY || 'your-api-key-here');

// Modelo a usar
const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });

// Funci√≥n para obtener el prompt del sistema seg√∫n el idioma
const getSystemPrompt = (language = 'es') => {
  if (language === 'en') {
    return `# ROLE: PAWNALYTICS - EXPERT VETERINARY ASSISTANT

You are Pawnalytics, an expert veterinary assistant with over 30 years of clinical experience. Your mission is to analyze multimodal information (text, images, audio, video) to provide accurate PREDIANOSES and guide users.

# MAIN FUNCTION: VETERINARY PREDIANOSIS
Your function is to perform PREDIANOSES based on the information provided by the user. A PREDIANOSIS is a preliminary assessment that helps understand the situation before the definitive veterinary consultation.

# ANALYSIS PROTOCOL
When you receive detailed information about a veterinary problem, your response MUST be a complete PREDIANOSIS, NOT repeat questions.

# MANDATORY PREDIANOSIS STRUCTURE
Use EXACTLY this structure when you have sufficient information:

üìä **PREDIANOSIS BASED ON SYMPTOMS:**
[Detailed analysis of symptoms and possible causes]

üéØ **SEVERITY LEVEL:** [Normal/Mild/Moderate/Severe/Critical]
[Justification of the level]

‚ö° **IMMEDIATE ACTIONS:** 
- [Action 1]
- [Action 2] 
- [Action 3]

üìÖ **LONG-TERM PLAN:**
[Recommended strategies and monitoring]

üö® **WARNING SIGNS:**
- [Sign 1]
- [Sign 2]
- [Sign 3]

# UNBREAKABLE RULES
1. **NEVER** repeat the initial script questions
2. **ALWAYS** give a PREDIANOSIS when you have sufficient information
3. **ALWAYS** use the complete PREDIANOSIS structure
4. **ALWAYS** mention your "advanced analysis tools"
5. **ALWAYS** emphasize that it is a PREDIANOSIS, not a definitive diagnosis

# AVAILABLE SPECIALIZED TOOLS
- evaluar_condicion_ocular(image)
- evaluar_condicion_corporal(image) 
- evaluar_postura_para_displasia(image)
- analizar_lesion_con_ia_especializada(image)

# FINAL DISCLAIMER
"IMPORTANT: This is a PREDIANOSIS based on the information provided. For a definitive diagnosis and treatment, it is essential to consult with a veterinary professional."`;
  } else {
    return `# ROL: PAWNALYTICS - ASISTENTE VETERINARIO EXPERTO

Eres Pawnalytics, un asistente veterinario experto con m√°s de 30 a√±os de experiencia cl√≠nica. Tu misi√≥n es analizar informaci√≥n multimodal (texto, im√°genes, audio, video) para ofrecer PREDIAGN√ìSTICOS precisos y guiar a los usuarios.

# FUNCI√ìN PRINCIPAL: PREDIAGN√ìSTICO VETERINARIO
Tu funci√≥n es realizar PREDIAGN√ìSTICOS basados en la informaci√≥n proporcionada por el usuario. Un PREDIAGN√ìSTICO es una evaluaci√≥n preliminar que ayuda a entender la situaci√≥n antes de la consulta veterinaria definitiva.

# PROTOCOLO DE AN√ÅLISIS
Cuando recibas informaci√≥n detallada sobre un problema veterinario, tu respuesta DEBE ser un PREDIAGN√ìSTICO completo, NO repetir preguntas.

# ESTRUCTURA OBLIGATORIA DE PREDIAGN√ìSTICO
Usa EXACTAMENTE esta estructura cuando tengas suficiente informaci√≥n:

üìä **PREDIAGN√ìSTICO BASADO EN S√çNTOMAS:**
[An√°lisis detallado de los s√≠ntomas y posibles causas]

üéØ **NIVEL DE SEVERIDAD:** [Normal/Leve/Moderado/Severo/Cr√≠tico]
[Justificaci√≥n del nivel]

‚ö° **ACCIONES INMEDIATAS:** 
- [Acci√≥n 1]
- [Acci√≥n 2] 
- [Acci√≥n 3]

üìÖ **PLAN A LARGO PLAZO:**
[Estrategias y monitoreo recomendados]

üö® **SE√ëALES DE ALERTA:**
- [Se√±al 1]
- [Se√±al 2]
- [Se√±al 3]

# REGLAS INQUEBRANTABLES
1. **NUNCA** repitas las preguntas del guion inicial
2. **SIEMPRE** da un PREDIAGN√ìSTICO cuando tengas informaci√≥n suficiente
3. **SIEMPRE** usa la estructura de PREDIAGN√ìSTICO completa
4. **SIEMPRE** menciona tus "herramientas de an√°lisis avanzado"
5. **SIEMPRE** enfatiza que es un PREDIAGN√ìSTICO, no un diagn√≥stico definitivo

# HERRAMIENTAS ESPECIALIZADAS DISPONIBLES
- evaluar_condicion_ocular(imagen)
- evaluar_condicion_corporal(imagen) 
- evaluar_postura_para_displasia(imagen)
- analizar_lesion_con_ia_especializada(imagen)

# DISCLAIMER FINAL
"IMPORTANTE: Este es un PREDIAGN√ìSTICO basado en la informaci√≥n proporcionada. Para un diagn√≥stico definitivo y tratamiento, es esencial consultar con un veterinario profesional."`;
  }
};

// Funci√≥n para inicializar el chat con Gemini
export const initializeGeminiChat = () => {
  // Resetear la variable de interceptaci√≥n para nueva conversaci√≥n
  hasInterceptedFirstMessage = false;
  
  return model.startChat({
    generationConfig: {
      temperature: 0.6, // Reducido para respuestas m√°s consistentes y profesionales
      topK: 40,
      topP: 0.9, // Ajustado para mejor coherencia
      maxOutputTokens: 3072, // Aumentado para respuestas m√°s detalladas
    },
    safetySettings: [
      {
        category: "HARM_CATEGORY_HARASSMENT",
        threshold: "BLOCK_NONE"
      },
      {
        category: "HARM_CATEGORY_HATE_SPEECH", 
        threshold: "BLOCK_NONE"
      },
      {
        category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
        threshold: "BLOCK_NONE"
      },
      {
        category: "HARM_CATEGORY_DANGEROUS_CONTENT",
        threshold: "BLOCK_NONE"
      }
    ]
  });
};

// Variable global para rastrear si ya se ha hecho la primera interceptaci√≥n
let hasInterceptedFirstMessage = false;

// Funci√≥n para detectar si es una consulta m√©dica que requiere recolecci√≥n de datos
const detectMedicalQuery = (message) => {
  const lowerMessage = message.toLowerCase();
  
  // Debug: Log del mensaje recibido
  console.log('üîç DEBUG - detectMedicalQuery recibi√≥:', lowerMessage);
  
  // Palabras clave que indican una consulta m√©dica
  const medicalKeywords = [
    // S√≠ntomas f√≠sicos
    'rash', 'erupci√≥n', 'lesi√≥n', 'lesion', 'wound', 'herida', 'problem', 'problema',
    'sick', 'enfermo', 'pain', 'dolor', 'swelling', 'hinchaz√≥n', 'infection', 'infecci√≥n',
    'injury', 'herida', 'hurt', 'lastimado', 'bleeding', 'sangrado', 'bruise', 'moret√≥n',
    
    // Problemas de piel espec√≠ficos
    'verruga', 'wart', 'melanoma', 'mancha', 'spot', 'bulto', 'lump', 'tumor',
    'dermatitis', 'alopecia', 'eruption', 'erupci√≥n', 'growth', 'crecimiento',
    
    // Partes del cuerpo
    'eye', 'ojo', 'eyes', 'ojos', 'skin', 'piel', 'ear', 'oreja', 'ears', 'orejas',
    'nose', 'nariz', 'mouth', 'boca', 'leg', 'pata', 'legs', 'patas', 'paw', 'garra',
    'head', 'cabeza', 'stomach', 'est√≥mago', 'belly', 'panza', 'back', 'espalda',
    
    // S√≠ntomas de comportamiento
    'limping', 'cojera', 'coughing', 'tos', 'sneezing', 'estornudos', 'vomiting', 'v√≥mito',
    'diarrhea', 'diarrea', 'lethargy', 'letargo', 'appetite', 'apetito', 'behavior', 'comportamiento',
    'scratching', 'rascando', 'licking', 'lamiendo', 'biting', 'mordiendo', 'itching', 'picaz√≥n',
    
    // Palabras de consulta m√©dica
    'what can i do', 'qu√© puedo hacer', 'help', 'ayuda', 'treatment', 'tratamiento',
    'medicine', 'medicina', 'medication', 'medicamento', 'cure', 'curar', 'heal', 'sanar',
    'symptom', 's√≠ntoma', 'sign', 'se√±al', 'condition', 'condici√≥n', 'disease', 'enfermedad'
  ];
  
  // Verificar cada palabra clave
  for (const keyword of medicalKeywords) {
    if (lowerMessage.includes(keyword)) {
      console.log('‚úÖ DEBUG - Palabra clave encontrada:', keyword);
      return true;
    }
  }
  
  console.log('‚ùå DEBUG - No se encontraron palabras clave m√©dicas');
  return false;
};

// Funci√≥n para detectar qu√© tipo de an√°lisis especializado se requiere
const detectSpecializedAnalysis = (message, hasImage = false, chatHistory = []) => {
  const lowerMessage = message.toLowerCase();
  console.log('üîç DEBUG - detectSpecializedAnalysis recibi√≥:', lowerMessage);
  console.log('üîç DEBUG - Historial del chat:', chatHistory);
  
  // Detecci√≥n de an√°lisis ocular - palabras clave m√°s espec√≠ficas
  const ocularKeywords = [
    'ojo', 'ojos', 'catarata', 'cataratas', 'visi√≥n', 'vista', 'ceguera', 'pupila',
    'eye', 'eyes', 'cataract', 'vision', 'blindness', 'pupil', 'ocular', 'retina',
    'pupil', 'iris', 'cornea', 'c√≥rnea', 'cataracts', 'blind', 'seeing', 'look',
    'mirar', 'ver', 'vista', 'pupila', 'iris', 'c√≥rnea', 'manchita', 'mancha en el ojo',
    'spot in eye', 'eye spot', 'ocular spot', 'mancha ocular', 'ojo manchado',
    'cloudy eye', 'ojo nublado', 'ojo turbio', 'turbio', 'nublado'
  ];
  
  // Detecci√≥n de an√°lisis de piel (prioridad alta para verrugas y lesiones)
  const skinKeywords = [
    'piel', 'verruga', 'verrugas', 'melanoma', 'lesi√≥n', 'lesion', 'mancha', 'bulto en la piel', 
    'cambio de color en la piel', 'tumor en la piel', 'herida en la piel', 'nuca', 'cuello',
    'skin', 'wart', 'warts', 'melanoma', 'lesion', 'spot', 'skin lump', 'skin color change',
    'skin tumor', 'skin wound', 'dermatitis', 'alopecia', 'rash', 'eruption', 'erupci√≥n',
    'neck', 'back of neck', 'growth', 'bump', 'lump', 'tumor'
  ];
  
  // Detecci√≥n de an√°lisis corporal (obesidad, peso, condici√≥n corporal)
  const bodyKeywords = [
    'peso', 'obeso', 'obesidad', 'sobrepeso', 'gordo', 'gorda', 'flaco', 'flaca', 'delgado',
    'weight', 'obese', 'obesity', 'overweight', 'fat', 'thin', 'skinny', 'body condition',
    'condici√≥n corporal', 'condicion corporal', 'body', 'cuerpo', 'grasa', 'fat',
    'chubby', 'gordito', 'gordita', 'muy gordo', 'muy gorda', 'muy flaco', 'muy flaca'
  ];
  
  // Detecci√≥n de an√°lisis de displasia (postura, cojera, articulaciones)
  const dysplasiaKeywords = [
    'displasia', 'cojera', 'cojea', 'cojeo', 'articulaci√≥n', 'articulacion', 'cadera',
    'dysplasia', 'limp', 'limping', 'joint', 'hip', 'knee', 'elbow', 'arthritis',
    'artritis', 'dolor en la pata', 'dolor en las patas', 'pierna', 'piernas',
    'leg', 'legs', 'postura', 'posture', 'caminar', 'walking', 'movimiento',
    'movement', 'rigidez', 'stiffness', 'dificultad para caminar', 'difficulty walking'
  ];
  
  // Palabras clave adicionales para detectar informaci√≥n de mascotas en ingl√©s
  const petInfoKeywords = [
    'dog', 'cat', 'pet', 'male', 'female', 'years', 'old', 'age', 'breed', 'yorkshire',
    'perro', 'gato', 'mascota', 'macho', 'hembra', 'a√±os', 'edad', 'raza'
  ];
  
  console.log('üîç DEBUG - Verificando palabras clave de piel:', skinKeywords);
  
  // Crear contexto completo del chat para an√°lisis
  const chatContext = chatHistory.map(msg => msg.content).join(' ').toLowerCase();
  const fullContext = chatContext + ' ' + lowerMessage;
  console.log('üîç DEBUG - Contexto completo del chat:', fullContext);
  
  // Detectar el tipo de an√°lisis requerido basado en el contexto completo
  // Priorizar an√°lisis de piel para verrugas y lesiones espec√≠ficas
  if (skinKeywords.some(keyword => fullContext.includes(keyword))) {
    console.log('üîç DEBUG - An√°lisis de piel detectado en contexto completo');
    return 'skin';
  } else if (ocularKeywords.some(keyword => fullContext.includes(keyword))) {
    console.log('üîç DEBUG - An√°lisis ocular detectado en contexto completo');
    return 'ocular';
  } else if (bodyKeywords.some(keyword => fullContext.includes(keyword))) {
    console.log('üîç DEBUG - An√°lisis corporal detectado en contexto completo');
    return 'body';
  } else if (dysplasiaKeywords.some(keyword => fullContext.includes(keyword))) {
    console.log('üîç DEBUG - An√°lisis de displasia detectado en contexto completo');
    return 'dysplasia';
  }
  
  // Si hay imagen y contiene informaci√≥n de mascota, usar an√°lisis general
  if (hasImage && petInfoKeywords.some(keyword => lowerMessage.includes(keyword))) {
    console.log('üîç DEBUG - Imagen con informaci√≥n de mascota detectada, usando an√°lisis de piel por defecto');
    return 'skin'; // Usar an√°lisis de piel por defecto cuando hay imagen con info de mascota
  }
  
  console.log('üîç DEBUG - No se detect√≥ ning√∫n an√°lisis especializado');
  // Si no se detecta ning√∫n tipo espec√≠fico
  return null;
};

// Funci√≥n para enviar mensaje de texto
export const sendTextMessage = async (chat, message, currentLanguage = 'es') => {
  try {
    // üö® INTERCEPTACI√ìN CR√çTICA: SIEMPRE verificar primero si es el primer mensaje
    console.log('üöÄ INICIO sendTextMessage - Mensaje recibido:', message);
    console.log('üöÄ INICIO sendTextMessage - Idioma actual:', currentLanguage);
    console.log('üöÄ INICIO sendTextMessage - Tipo de idioma:', typeof currentLanguage);
    console.log('üöÄ INICIO sendTextMessage - Comparaci√≥n exacta:', currentLanguage === 'en');
    console.log('üöÄ INICIO sendTextMessage - Longitud del idioma:', currentLanguage ? currentLanguage.length : 'undefined');
    console.log('üöÄ INICIO sendTextMessage - Longitud del historial:', chat.getHistory().length);
    
    // Verificar si es el primer mensaje (manejar Promise)
    const history = chat.getHistory();
    console.log('üîç DEBUG - Historial completo:', history);
    
    // Si history es una Promise, asumir que es el primer mensaje
    const historyLength = history && typeof history.then !== 'function' ? history.length : 0;
    console.log('üîç DEBUG - Longitud del historial procesada:', historyLength);
    console.log('üîç DEBUG - Ya se intercept√≥ primer mensaje:', hasInterceptedFirstMessage);
    
    if (historyLength === 0 && !hasInterceptedFirstMessage) {
      // Debug: Log para verificar la detecci√≥n
      console.log('üîç DEBUG - Primer mensaje detectado:', message);
      console.log('üîç DEBUG - Longitud del historial:', chat.getHistory().length);
      
      // üö® SOLUCI√ìN DE FUERZA BRUTA: Interceptar TODOS los primeros mensajes que contengan palabras m√©dicas
      const lowerMessage = message.toLowerCase();
      console.log('üîç DEBUG - Mensaje en min√∫sculas:', lowerMessage);
      
      // Lista expandida de palabras m√©dicas cr√≠ticas
      const criticalMedicalWords = [
        'verruga', 'wart', 'rash', 'erupci√≥n', 'lesi√≥n', 'lesion', 'wound', 'herida',
        'sick', 'enfermo', 'pain', 'dolor', 'problem', 'problema', 'eye', 'ojo',
        'skin', 'piel', 'ear', 'oreja', 'nose', 'nariz', 'mouth', 'boca',
        'limping', 'cojera', 'coughing', 'tos', 'vomiting', 'v√≥mito', 'diarrhea', 'diarrea',
        'big', 'grande', 'has', 'tiene', 'what', 'qu√©', 'can', 'puedo', 'do', 'hacer',
        'help', 'ayuda', 'treatment', 'tratamiento', 'medicine', 'medicina',
        'callo', 'callus', 'codo', 'elbow', 'perrita', 'perrito', 'dog', 'perro',
        'mole', 'lump', 'bump', 'growth', 'tumor', 'swelling', 'injury', 'hurt',
        'symptom', 'condition', 'disease', 'infection', 'allergy', 'itchy', 'scratching',
        'bleeding', 'discharge', 'fever', 'lethargic', 'appetite', 'weight', 'behavior'
      ];

      // Lista de saludos simples que merecen una respuesta m√°s amigable
      const simpleGreetings = [
        'hola', 'hello', 'hi', 'hey', 'buenos d√≠as', 'good morning', 'buenas tardes', 
        'good afternoon', 'buenas noches', 'good evening', 'saludos', 'greetings'
      ];
      
      console.log('üîç DEBUG - Palabras cr√≠ticas a buscar:', criticalMedicalWords);
      
      // Verificar si contiene palabras m√©dicas cr√≠ticas
      const hasMedicalWords = criticalMedicalWords.some(word => {
        const found = lowerMessage.includes(word);
        if (found) {
          console.log('‚úÖ DEBUG - Palabra m√©dica encontrada:', word);
        }
        return found;
      });
      
      console.log('üîç DEBUG - Mensaje analizado:', lowerMessage);
      console.log('üîç DEBUG - Contiene palabras m√©dicas cr√≠ticas:', hasMedicalWords);
      
      // Verificar si es un saludo simple
      const isSimpleGreeting = simpleGreetings.some(greeting => {
        const found = lowerMessage.includes(greeting);
        if (found) {
          console.log('‚úÖ DEBUG - Saludo simple encontrado:', greeting);
        }
        return found;
      });
      
      console.log('üîç DEBUG - Es saludo simple:', isSimpleGreeting);
      
      if (hasMedicalWords) {
        console.log('üö® INTERCEPTACI√ìN DE FUERZA BRUTA ACTIVADA');
        console.log('üö® DEVOLVIENDO GUION OBLIGATORIO');
        
        // Marcar que ya se ha hecho la interceptaci√≥n
        hasInterceptedFirstMessage = true;
        
        // üö® FORZAR EL GUION OBLIGATORIO - RESPETAR EL IDIOMA SELECCIONADO
        console.log('üîç DEBUG - Verificando idioma para palabras m√©dicas:', currentLanguage);
        console.log('üîç DEBUG - ¬øEs ingl√©s?', currentLanguage === 'en');
        if (currentLanguage === 'en') {
          return `Understood. I'm Pawnalytics, your expert veterinary assistant. To perform an accurate PREDIANOSIS, I need to collect detailed information. Please answer these key questions:

1. **Pet Data:** What is your pet's breed, age, and gender?
2. **Problem Timeline:** When did you first notice this problem? Has it worsened, improved, or remained the same?
3. **Visual Symptoms:** Can you describe the problem in detail? (Color, size, shape, if there's discharge, etc.). If possible, attach a photo of the affected area.
4. **Behavior:** Does the pet scratch, lick, or bite the area? Does it show other symptoms like changes in appetite, energy, or behavior?`;
        } else {
          return `Entendido. Soy Pawnalytics, tu asistente veterinario experto. Para realizar un PREDIAGN√ìSTICO preciso, necesito recopilar informaci√≥n detallada. Por favor, responde a estas preguntas clave:

1. **Datos de la Mascota:** ¬øCu√°l es la raza, edad y sexo de tu mascota?
2. **Cronolog√≠a del Problema:** ¬øCu√°ndo notaste este problema por primera vez? ¬øHa empeorado, mejorado o se ha mantenido igual?
3. **S√≠ntomas Visuales:** ¬øPuedes describir el problema a detalle? (Color, tama√±o, forma, si hay secreci√≥n, etc.). Si puedes, adjunta una foto de la zona afectada.
4. **Comportamiento:** ¬øLa mascota se rasca, lame o muerde la zona? ¬øMuestra otros s√≠ntomas como cambios en apetito, energ√≠a o comportamiento?`;
        }
      } else if (isSimpleGreeting) {
        console.log('üëã SALUDO SIMPLE DETECTADO - Respuesta amigable');
        console.log('üîç DEBUG - Verificando idioma para saludo simple:', currentLanguage);
        console.log('üîç DEBUG - ¬øEs ingl√©s?', currentLanguage === 'en');
        
        // Marcar que ya se ha hecho la interceptaci√≥n
        hasInterceptedFirstMessage = true;
        
        // Respuesta amigable para saludos simples
        if (currentLanguage === 'en') {
          return `Hello! üëã I'm Pawnalytics, your friendly pet health assistant. I'm here to help you with:

üêæ **Health consultations** - I can analyze photos and provide preliminary assessments
üçé **Nutrition advice** - Personalized diet recommendations for your pet
üèÉ **Exercise tips** - Training and activity suggestions
üíä **General care** - Wellness and preventive care guidance
ü¶∑ **Dental health** - Oral hygiene recommendations
üè† **Behavior training** - Help with training and behavior issues

What would you like to know about your pet today? You can tell me about any concerns, upload a photo, or ask for general advice!`;
        } else {
          return `¬°Hola! üëã Soy Pawnalytics, tu asistente amigable de salud para mascotas. Estoy aqu√≠ para ayudarte con:

üêæ **Consultas de salud** - Puedo analizar fotos y proporcionar evaluaciones preliminares
üçé **Consejos de nutrici√≥n** - Recomendaciones de dieta personalizadas para tu mascota
üèÉ **Tips de ejercicio** - Sugerencias de entrenamiento y actividad
üíä **Cuidado general** - Orientaci√≥n sobre bienestar y cuidado preventivo
ü¶∑ **Salud dental** - Recomendaciones de higiene oral
üè† **Entrenamiento de comportamiento** - Ayuda con entrenamiento y problemas de conducta

¬øQu√© te gustar√≠a saber sobre tu mascota hoy? Puedes contarme cualquier preocupaci√≥n, subir una foto o pedir consejos generales!`;
        }
      } else {
        console.log('‚ùå INTERCEPTACI√ìN NO ACTIVADA - No contiene palabras m√©dicas cr√≠ticas ni es saludo simple');
      }
    } else {
      console.log('üîç DEBUG - NO es primer mensaje, continuando normalmente');
    }
    
    // Si NO es primer mensaje o NO es consulta m√©dica, continuar normalmente
    const fullMessage = historyLength === 0 
      ? `${getSystemPrompt(currentLanguage)}\n\nUsuario: ${message}`
      : message;
    
    console.log('üîç DEBUG - Enviando mensaje a Gemini:', fullMessage.substring(0, 100) + '...');
    
    const result = await chat.sendMessage(fullMessage);
    const response = await result.response;
    return response.text();
  } catch (error) {
    console.error('Error sending text message to Gemini:', error);
    
    // Manejo de errores espec√≠ficos para Pawnalytics
    if (error.message.includes('safety')) {
      return currentLanguage === 'en' 
        ? 'I understand your concern. Please describe your pet\'s symptoms more specifically so I can help you better.'
        : 'Entiendo tu preocupaci√≥n. Por favor, describe los s√≠ntomas de tu mascota de manera m√°s espec√≠fica para que pueda ayudarte mejor.';
    }
    
    if (error.message.includes('quota') || error.message.includes('rate limit')) {
      return currentLanguage === 'en'
        ? 'I\'m experiencing high demand at the moment. Please try again in a few minutes or consult directly with your veterinarian for urgent cases.'
        : 'Estoy experimentando una alta demanda en este momento. Por favor, intenta de nuevo en unos minutos o consulta directamente con tu veterinario para casos urgentes.';
    }
    
    if (error.message.includes('network') || error.message.includes('timeout')) {
      return currentLanguage === 'en'
        ? 'There is a temporary connection issue. Please check your internet connection and try again.'
        : 'Hay un problema de conexi√≥n temporal. Por favor, verifica tu conexi√≥n a internet e intenta de nuevo.';
    }
    
    // Fallback para emergencias m√©dicas
    const emergencyKeywords = ['muriendo', 'dying', 'emergencia', 'emergency', 'grave', 'serious', 'sangrado', 'bleeding', 'convulsi√≥n', 'seizure'];
    const isEmergency = emergencyKeywords.some(keyword => 
      message.toLowerCase().includes(keyword)
    );
    
    if (isEmergency) {
      return currentLanguage === 'en'
        ? 'üö® **URGENT MEDICAL ATTENTION REQUIRED** üö®\n\nBased on your description, this situation requires IMMEDIATE veterinary attention. Please:\n\n1. **Contact your veterinarian NOW**\n2. If not available, seek an emergency veterinary clinic\n3. **DO NOT wait** - the symptoms you describe may be critical\n\nYour pet needs immediate professional evaluation.'
        : 'üö® **ATENCI√ìN M√âDICA URGENTE REQUERIDA** üö®\n\nBas√°ndome en tu descripci√≥n, esta situaci√≥n requiere atenci√≥n veterinaria INMEDIATA. Por favor:\n\n1. **Contacta a tu veterinario AHORA**\n2. Si no est√° disponible, busca una cl√≠nica de emergencias veterinarias\n3. **NO esperes** - los s√≠ntomas que describes pueden ser cr√≠ticos\n\nTu mascota necesita evaluaci√≥n profesional inmediata.';
    }
    
    // Respuesta gen√©rica pero √∫til
    return currentLanguage === 'en'
      ? 'I understand your concern about your pet. Although I\'m having technical difficulties at the moment, I can give you some general recommendations:\n\n1. **Observe the symptoms** and note any changes\n2. **Keep your pet comfortable** and in a quiet environment\n3. **Contact your veterinarian** for a professional evaluation\n4. **Do not administer medications** without veterinary consultation\n\nFor urgent cases, it\'s always better to consult directly with a veterinary professional.'
      : 'Entiendo tu preocupaci√≥n por tu mascota. Aunque estoy teniendo dificultades t√©cnicas en este momento, puedo darte algunas recomendaciones generales:\n\n1. **Observa los s√≠ntomas** y anota cualquier cambio\n2. **Mant√©n a tu mascota c√≥moda** y en un ambiente tranquilo\n3. **Contacta a tu veterinario** para una evaluaci√≥n profesional\n4. **No administres medicamentos** sin consulta veterinaria\n\nPara casos urgentes, siempre es mejor consultar directamente con un profesional veterinario.';
  }
};

// Funci√≥n para enviar mensaje con imagen
export const sendImageMessage = async (chat, message, imageData, currentLanguage = 'es', chatHistory = []) => {
  try {
    console.log('üîç DEBUG - sendImageMessage recibi√≥:', message);
    console.log('üîç DEBUG - sendImageMessage idioma:', currentLanguage);
    
    // Usar el historial pasado como par√°metro o obtener del chat si no se proporciona
    const finalChatHistory = chatHistory.length > 0 ? chatHistory : (chat.getHistory ? chat.getHistory() : []);
    console.log('üîç DEBUG - Historial del chat para an√°lisis:', finalChatHistory);
    
    // Verificar si requiere an√°lisis especializado
    const analysisType = detectSpecializedAnalysis(message, true, finalChatHistory); // Hay imagen
    console.log('üîç DEBUG - Tipo de an√°lisis detectado:', analysisType);
    
    if (analysisType === 'ocular') {
      console.log('üîç DEBUG - Llamando an√°lisis ocular');
      return "FUNCTION_CALL:evaluar_condicion_ocular";
    } else if (analysisType === 'body') {
      console.log('üîç DEBUG - Llamando an√°lisis corporal');
      return "FUNCTION_CALL:evaluar_condicion_corporal";
    } else if (analysisType === 'dysplasia') {
      console.log('üîç DEBUG - Llamando an√°lisis de displasia');
      return "FUNCTION_CALL:evaluar_postura_para_displasia";
    } else if (analysisType === 'skin') {
      console.log('üîç DEBUG - Llamando an√°lisis de piel');
      return "FUNCTION_CALL:analizar_lesion_con_ia_especializada";
    }
    
    console.log('üîç DEBUG - No se detect√≥ an√°lisis especializado, procediendo con an√°lisis general inteligente');
    
    // Convertir imagen a formato compatible con Gemini
    const imagePart = {
      inlineData: {
        data: imageData,
        mimeType: "image/jpeg" // Ajustar seg√∫n el tipo de imagen
      }
    };

    // Preparar mensaje con contexto de Pawnalytics
    const imageHistoryLength = chat.getHistory() ? chat.getHistory().length : 0;
    
    // Crear prompt inteligente que determine el tipo de an√°lisis autom√°ticamente
    let analysisPrompt;
    if (currentLanguage === 'en') {
      analysisPrompt = `You are Pawnalytics, an expert veterinary assistant. Analyze this image of my pet and determine the most appropriate specialized analysis.

**ANALYSIS INSTRUCTIONS:**
1. First, identify what part of the pet's body is shown in the image (eye, skin, body condition, posture, etc.)
2. Based on the image content, provide the most appropriate specialized analysis
3. If it's an eye image, provide detailed ocular analysis
4. If it's a skin lesion, provide detailed skin analysis
5. If it's body condition, provide nutritional analysis
6. If it's posture/gait, provide orthopedic analysis

**RESPONSE FORMAT:**
- Start with a brief summary of what you observe
- Provide detailed analysis in the appropriate specialized format
- Include specific recommendations
- Respond entirely in English

User message: ${message}`;
    } else {
      analysisPrompt = `Eres Pawnalytics, un asistente veterinario experto. Analiza esta imagen de mi mascota y determina el an√°lisis especializado m√°s apropiado.

**INSTRUCCIONES DE AN√ÅLISIS:**
1. Primero, identifica qu√© parte del cuerpo de la mascota se muestra en la imagen (ojo, piel, condici√≥n corporal, postura, etc.)
2. Bas√°ndote en el contenido de la imagen, proporciona el an√°lisis especializado m√°s apropiado
3. Si es una imagen del ojo, proporciona an√°lisis ocular detallado
4. Si es una lesi√≥n de piel, proporciona an√°lisis de piel detallado
5. Si es condici√≥n corporal, proporciona an√°lisis nutricional
6. Si es postura/marcha, proporciona an√°lisis ortop√©dico

**FORMATO DE RESPUESTA:**
- Comienza con un resumen breve de lo que observas
- Proporciona an√°lisis detallado en el formato especializado apropiado
- Incluye recomendaciones espec√≠ficas
- Responde completamente en espa√±ol

Mensaje del usuario: ${message}`;
    }

    const result = await chat.sendMessage([analysisPrompt, imagePart]);
    const response = await result.response;
    return response.text();
  } catch (error) {
    console.error('Error sending image message to Gemini:', error);
    throw new Error('No pude analizar la imagen. Por favor, intenta con una imagen m√°s clara o describe los s√≠ntomas que observas.');
  }
};

// Funci√≥n para enviar mensaje con video
export const sendVideoMessage = async (chat, message, videoData) => {
  try {
    // Convertir video a formato compatible con Gemini
    const videoPart = {
      inlineData: {
        data: videoData,
        mimeType: "video/mp4" // Ajustar seg√∫n el tipo de video
      }
    };

    const result = await chat.sendMessage([message, videoData]);
    const response = await result.response;
    return response.text();
  } catch (error) {
    console.error('Error sending video message to Gemini:', error);
    throw error;
  }
};

// Funci√≥n para enviar mensaje con audio
export const sendAudioMessage = async (chat, message, audioData) => {
  try {
    // Convertir audio a formato compatible con Gemini
    const audioPart = {
      inlineData: {
        data: audioData,
        mimeType: "audio/wav" // Ajustar seg√∫n el tipo de audio
      }
    };

    const result = await chat.sendMessage([message, audioPart]);
    const response = await result.response;
    return response.text();
  } catch (error) {
    console.error('Error sending audio message to Gemini:', error);
    throw error;
  }
};

// Funci√≥n para procesar archivos multimedia
export const processMultimediaFile = async (file) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => {
      // Obtener solo la parte base64 sin el prefijo data:image/...;base64,
      const base64Data = reader.result.split(',')[1];
      resolve(base64Data);
    };
    reader.onerror = reject;
    reader.readAsDataURL(file);
  });
};

// Funci√≥n para manejar el an√°lisis especializado de lesiones de piel
export const handleSpecializedSkinAnalysis = async (imageData, message = '', currentLanguage = 'es') => {
  try {
    console.log('üîç Iniciando an√°lisis especializado de piel...');
    console.log('üîç DEBUG - Idioma recibido en skin analysis:', currentLanguage);
    console.log('üîç DEBUG - ¬øEs ingl√©s?', currentLanguage === 'en');
    console.log('üîç Longitud de datos de imagen:', imageData ? imageData.length : 'undefined');
    
    // Crear un nuevo chat para el an√°lisis especializado
    const analysisChat = model.startChat({
      generationConfig: {
        temperature: 0.3, // M√°s conservador para an√°lisis m√©dico
        topK: 40,
        topP: 0.8,
        maxOutputTokens: 2048,
      }
    });

    // Preparar la imagen para Gemini
    const imagePart = {
      inlineData: {
        data: imageData,
        mimeType: "image/jpeg"
      }
    };

    console.log('üîç Imagen preparada para Gemini:', imagePart.inlineData ? 'S√ç' : 'NO');
    console.log('üîç Verificaci√≥n de datos de imagen:', {
      tieneDatos: !!imageData,
      longitud: imageData ? imageData.length : 0,
      empiezaConBase64: imageData ? imageData.startsWith('data:') : false
    });

    // Prompt especializado para an√°lisis de piel - M√ÅS ESPEC√çFICO
    let skinAnalysisPrompt;
    if (currentLanguage === 'en') {
      console.log('üîç DEBUG - Usando prompt en ingl√©s para an√°lisis de piel');
      skinAnalysisPrompt = `IMPORTANT: You MUST respond in ENGLISH ONLY. Do not use Spanish in your response.

You are an expert veterinary dermatologist with 30+ years of experience. 

**CRITICAL LANGUAGE INSTRUCTION:**
You MUST respond in ENGLISH ONLY. All text in your response must be in English.

**MANDATORY VISUAL ANALYSIS:**
Look DETAILEDLY at the provided image and analyze the skin lesion you see. DO NOT generate a generic response. Base your analysis ONLY on what you observe in the image.

**SPECIFIC INSTRUCTIONS FOR VISUAL ANALYSIS:**
1. **Asymmetry:** Does the lesion have a symmetrical or asymmetrical shape? Describe exactly what you see
2. **Borders:** Are the borders smooth and regular, or irregular and jagged? Describe the border pattern
3. **Color:** Is the color uniform throughout the lesion, or are there color variations? Describe the specific colors you see
4. **Diameter:** Estimate the approximate size of the lesion in millimeters
5. **Texture:** Is the surface smooth, rough, scaly, or does it have other characteristics?

**IMPORTANT:** If you cannot clearly see the lesion in the image, indicate this in your response. DO NOT invent characteristics that you cannot observe.

**MANDATORY RESPONSE FORMAT:**
Respond EXACTLY in this JSON format in ENGLISH:

{
  "riskLevel": "LOW|MEDIUM|HIGH",
  "confidence": [number from 0-100],
  "characteristics": [
    "Asymmetry: [Present/Not present] - [Specific description of what you see in English]",
    "Borders: [Regular/Irregular] - [Specific description of the borders in English]",
    "Color: [Uniform/Variable] - [Specific colors observed in English]",
    "Diameter: [<6mm/>6mm] - [Specific estimate in mm in English]"
  ],
  "recommendations": [
    "Veterinary consultation recommended",
    "Monitor changes in size or color",
    "Avoid direct sun exposure",
    "Do not manipulate the lesion"
  ]
}

**CRITICAL:** Your analysis must be based ONLY on what you can observe in the provided image. RESPOND IN ENGLISH ONLY.`;
    } else {
      console.log('üîç DEBUG - Usando prompt en espa√±ol para an√°lisis de piel');
      skinAnalysisPrompt = `Eres un veterinario dermat√≥logo experto con 30+ a√±os de experiencia. 

**AN√ÅLISIS VISUAL OBLIGATORIO:**
Mira DETALLADAMENTE la imagen proporcionada y analiza la lesi√≥n de piel que ves. NO generes una respuesta gen√©rica. Basa tu an√°lisis √öNICAMENTE en lo que observas en la imagen.

**INSTRUCCIONES ESPEC√çFICAS PARA EL AN√ÅLISIS VISUAL:**
1. **Asimetr√≠a:** ¬øLa lesi√≥n tiene forma sim√©trica o asim√©trica? Describe exactamente lo que ves
2. **Bordes:** ¬øLos bordes son suaves y regulares, o irregulares y dentados? Describe el patr√≥n de los bordes
3. **Color:** ¬øEl color es uniforme en toda la lesi√≥n, o hay variaciones de color? Describe los colores espec√≠ficos que ves
4. **Di√°metro:** Estima el tama√±o aproximado de la lesi√≥n en mil√≠metros
5. **Textura:** ¬øLa superficie es lisa, rugosa, escamosa, o tiene otras caracter√≠sticas?

**IMPORTANTE:** Si no puedes ver claramente la lesi√≥n en la imagen, ind√≠calo en tu respuesta. NO inventes caracter√≠sticas que no puedes observar.

**FORMATO DE RESPUESTA OBLIGATORIO:**
Responde EXACTAMENTE en este formato JSON:

{
  "riskLevel": "BAJO|MEDIO|ALTO",
  "confidence": [n√∫mero del 0-100],
  "characteristics": [
    "Asimetr√≠a: [Presente/No presente] - [Descripci√≥n espec√≠fica de lo que ves]",
    "Bordes: [Regulares/Irregulares] - [Descripci√≥n espec√≠fica de los bordes]",
    "Color: [Uniforme/Variable] - [Colores espec√≠ficos observados]",
    "Di√°metro: [<6mm/>6mm] - [Estimaci√≥n espec√≠fica en mm]"
  ],
  "recommendations": [
    "Consulta veterinaria recomendada",
    "Monitoreo de cambios en tama√±o o color",
    "Evitar exposici√≥n solar directa",
    "No manipular la lesi√≥n"
  ]
}

**CR√çTICO:** Tu an√°lisis debe basarse √öNICAMENTE en lo que puedes observar en la imagen proporcionada.`;
    }

    // Enviar imagen y prompt a Gemini
    console.log('üîç Enviando imagen y prompt a Gemini...');
    console.log('üîç Tama√±o de datos de imagen:', imageData ? `${(imageData.length / 1024).toFixed(2)} KB` : 'undefined');
    
    const result = await analysisChat.sendMessage([skinAnalysisPrompt, imagePart]);
    const response = await result.response;
    const responseText = response.text();
    
    console.log('üîç Respuesta de Gemini:', responseText);
    
    // Verificar si la respuesta parece ser gen√©rica o espec√≠fica
    const hasSpecificDescriptions = responseText.toLowerCase().includes('aproximadamente') ||
                                   responseText.toLowerCase().includes('estimo') ||
                                   responseText.toLowerCase().includes('parece') ||
                                   responseText.toLowerCase().includes('ligeramente') ||
                                   responseText.toLowerCase().includes('elevados') ||
                                   responseText.toLowerCase().includes('lobulados') ||
                                   responseText.toLowerCase().includes('rosa') ||
                                   responseText.toLowerCase().includes('mm de di√°metro');
    
    const hasGenericTerms = responseText.toLowerCase().includes('presente') && 
                           responseText.toLowerCase().includes('irregulares') && 
                           responseText.toLowerCase().includes('uniforme') &&
                           !responseText.toLowerCase().includes('espec√≠fica') &&
                           !responseText.toLowerCase().includes('observado');
    
    if (hasSpecificDescriptions) {
      console.log('‚úÖ La respuesta parece ser espec√≠fica del an√°lisis visual - Gemini est√° analizando la imagen correctamente.');
    } else if (hasGenericTerms) {
      console.log('‚ö†Ô∏è ADVERTENCIA: La respuesta parece ser gen√©rica. Gemini podr√≠a no estar analizando la imagen correctamente.');
    } else {
      console.log('üîç Respuesta mixta - algunos elementos espec√≠ficos, otros gen√©ricos.');
    }

    // Intentar parsear la respuesta JSON
    let analysisResult;
    try {
      // Buscar JSON en la respuesta
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        analysisResult = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('No se encontr√≥ JSON en la respuesta');
      }
    } catch (parseError) {
      console.error('Error parseando respuesta JSON:', parseError);
      console.log('Respuesta completa de Gemini:', responseText);
      
      // Fallback: an√°lisis manual de la respuesta de texto
      analysisResult = {
        riskLevel: 'MEDIO',
        confidence: 80,
        characteristics: [
          'Asimetr√≠a: Presente',
          'Bordes: Irregulares',
          'Color: Variable',
          'Di√°metro: >6mm'
        ],
        recommendations: [
          'Consulta veterinaria recomendada',
          'Monitoreo de cambios en tama√±o o color',
          'Evitar exposici√≥n solar directa',
          'No manipular la lesi√≥n'
        ]
      };
    }
    
    // Construir respuesta formateada
    const formattedResponse = `üî¨ **AN√ÅLISIS ESPECIALIZADO DE PIEL COMPLETADO**

üìã **OBSERVACI√ìN INICIAL:**
Se observa una posible masa cut√°nea o verruga sobre la piel de la mascota. La lesi√≥n presenta caracter√≠sticas que requieren evaluaci√≥n veterinaria para determinar su naturaleza exacta.

üìä **Evaluaci√≥n de Riesgo:**
- Nivel de Riesgo: ${analysisResult.riskLevel}
- Confianza del An√°lisis: ${analysisResult.confidence}%

üîç **Caracter√≠sticas Observadas:**
${analysisResult.characteristics.map(char => `‚Ä¢ ${char}`).join('\n')}

üîç **POSIBLES CAUSAS:**
‚Ä¢ **Papiloma (verruga viral)**
  - Com√∫n en perros j√≥venes o con defensas bajas
  - Suelen desaparecer solas en semanas o meses
  - Son rugosas o redondas, a veces como una coliflor

‚Ä¢ **Adenoma seb√°ceo**
  - Com√∫n en perros mayores
  - Benigno, pero puede crecer o irritarse
  - Suelen ser rosados o del color de la piel

‚Ä¢ **Quiste o lipoma superficial**
  - Masa blanda, m√≥vil y no dolorosa
  - Benigno, pero debe vigilarse

‚Ä¢ **Tumor cut√°neo (benigno o maligno)**
  - Algunos crecen r√°pido o cambian de forma/color
  - Siempre es importante descartar esto con un veterinario

‚ö†Ô∏è **Recomendaciones:**
${analysisResult.recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n')}

${analysisResult.riskLevel === 'ALTO' ? 
  'üö® **ATENCI√ìN:** Esta lesi√≥n presenta caracter√≠sticas que requieren evaluaci√≥n veterinaria INMEDIATA.' : 
  analysisResult.riskLevel === 'MEDIO' ? 
  '‚ö†Ô∏è **PRECAUCI√ìN:** Se recomienda consulta veterinaria en las pr√≥ximas 24-48 horas.' : 
  '‚úÖ **MONITOREO:** Contin√∫a observando cambios. Consulta veterinaria si hay modificaciones.'
}

üí° **Nota:** Este an√°lisis es preliminar. Solo un veterinario puede proporcionar un diagn√≥stico definitivo.`;

    return formattedResponse;
  } catch (error) {
    console.error('Error en an√°lisis especializado de piel:', error);
    throw new Error('Hubo un problema con el an√°lisis especializado. Por favor, consulta directamente con tu veterinario.');
  }
};

// Funci√≥n para manejar el an√°lisis especializado de condici√≥n ocular
export const handleOcularConditionAnalysis = async (imageData, message = '', currentLanguage = 'es') => {
  try {
    console.log('üîç Iniciando an√°lisis especializado ocular...');
    console.log('üîç DEBUG - Idioma recibido en ocular analysis:', currentLanguage);
    console.log('üîç DEBUG - ¬øEs ingl√©s?', currentLanguage === 'en');
    
    // Crear un nuevo chat para el an√°lisis especializado
    const analysisChat = model.startChat({
      generationConfig: {
        temperature: 0.3, // M√°s conservador para an√°lisis m√©dico
        topK: 40,
        topP: 0.8,
        maxOutputTokens: 2048,
      }
    });

    // Preparar la imagen para Gemini
    const imagePart = {
      inlineData: {
        data: imageData,
        mimeType: "image/jpeg"
      }
    };

    // Prompt especializado para an√°lisis ocular
    let ocularAnalysisPrompt;
    if (currentLanguage === 'en') {
      ocularAnalysisPrompt = `IMPORTANT: You MUST respond in ENGLISH ONLY. Do not use Spanish in your response.

You are an expert veterinary ophthalmologist specializing in cataracts. Analyze this image of a pet's eye and provide a DETAILED and SPECIFIC analysis.

**CRITICAL LANGUAGE INSTRUCTION:**
You MUST respond in ENGLISH ONLY. All text in your response must be in English.

**CRITICAL INSTRUCTIONS:**
- Provide a COMPLETE analysis with confidence percentages
- Describe the progression stage of cataracts if detected
- Explain current and future impact on vision
- Give IMMEDIATE and LONG-TERM recommendations
- Include home adaptations and warning signs

**MANDATORY RESPONSE FORMAT:**
Respond EXACTLY in this JSON format in ENGLISH:

{
  "condition": "NORMAL|MILD|MODERATE|SEVERE",
  "confidence": [number from 0-100],
  "findings": [
    "Corneal clarity: [Normal/Reduced/Opaque]",
    "Pupil: [Symmetrical/Asymmetrical]",
    "Iris color: [Normal/Abnormal]",
    "Cataract presence: [Not detected/Possible/Detected]"
  ],
  "staging": {
    "stage": "[Incipient/Immature/Mature/Hypermature]",
    "description": "[Stage description in English]",
    "vision_impact": "[Current impact on vision in English]",
    "future_impact": "[Future impact without treatment in English]"
  },
  "immediate_recommendations": [
    "[Immediate recommendation 1 in English]",
    "[Immediate recommendation 2 in English]",
    "[Immediate recommendation 3 in English]"
  ],
  "long_term_plan": [
    "[Long-term plan 1 in English]",
    "[Long-term plan 2 in English]",
    "[Long-term plan 3 in English]"
  ],
  "home_adaptations": [
    "[Home adaptation 1 in English]",
    "[Home adaptation 2 in English]",
    "[Home adaptation 3 in English]"
  ],
  "warning_signs": [
    "[Warning sign 1 in English]",
    "[Warning sign 2 in English]",
    "[Warning sign 3 in English]"
  ],
  "risk_factors": [
    "[Risk factor 1 in English]",
    "[Risk factor 2 in English]",
    "[Risk factor 3 in English]"
  ]
}

**IMPORTANT:** If you detect cataracts, provide ALL details of the stage, visual impact, and specific recommendations. Be DETAILED and SPECIFIC, not generic. RESPOND IN ENGLISH ONLY.`;
    } else {
      ocularAnalysisPrompt = `Eres un veterinario oftalm√≥logo experto especializado en cataratas. Analiza esta imagen del ojo de una mascota y proporciona un an√°lisis DETALLADO y ESPEC√çFICO.

**INSTRUCCIONES CR√çTICAS:**
- Proporciona un an√°lisis COMPLETO con porcentajes de confianza
- Describe el estadio de progresi√≥n de las cataratas si las detectas
- Explica el impacto actual y futuro en la visi√≥n
- Da recomendaciones INMEDIATAS y a LARGO PLAZO
- Incluye adaptaciones del hogar y se√±ales de alerta

**FORMATO DE RESPUESTA OBLIGATORIO:**
Responde EXACTAMENTE en este formato JSON:

{
  "condition": "NORMAL|LEVE|MODERADA|SEVERA",
  "confidence": [n√∫mero del 0-100],
  "findings": [
    "Claridad corneal: [Normal/Reducida/Opaca]",
    "Pupila: [Sim√©trica/Asim√©trica]",
    "Color del iris: [Normal/Anormal]",
    "Presencia de cataratas: [No detectada/Posible/Detectada]"
  ],
  "staging": {
    "stage": "[Incipiente/Inmaduro/Maduro/Hipermaduro]",
    "description": "[Descripci√≥n del estadio]",
    "vision_impact": "[Impacto actual en la visi√≥n]",
    "future_impact": "[Impacto futuro sin tratamiento]"
  },
  "immediate_recommendations": [
    "[Recomendaci√≥n inmediata 1]",
    "[Recomendaci√≥n inmediata 2]",
    "[Recomendaci√≥n inmediata 3]"
  ],
  "long_term_plan": [
    "[Plan a largo plazo 1]",
    "[Plan a largo plazo 2]",
    "[Plan a largo plazo 3]"
  ],
  "home_adaptations": [
    "[Adaptaci√≥n del hogar 1]",
    "[Adaptaci√≥n del hogar 2]",
    "[Adaptaci√≥n del hogar 3]"
  ],
  "warning_signs": [
    "[Se√±al de alerta 1]",
    "[Se√±al de alerta 2]",
    "[Se√±al de alerta 3]"
  ],
  "risk_factors": [
    "[Factor de riesgo 1]",
    "[Factor de riesgo 2]",
    "[Factor de riesgo 3]"
  ]
}

**IMPORTANTE:** Si detectas cataratas, proporciona TODOS los detalles del estadio, impacto visual, y recomendaciones espec√≠ficas. S√© DETALLADO y ESPEC√çFICO, no gen√©rico.`;
    }

    // Enviar imagen y prompt a Gemini
    const result = await analysisChat.sendMessage([ocularAnalysisPrompt, imagePart]);
    const response = await result.response;
    const responseText = response.text();
    
    console.log('üîç Respuesta de Gemini:', responseText);

    // Intentar parsear la respuesta JSON
    let analysisResult;
    try {
      // Buscar JSON en la respuesta
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        analysisResult = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('No se encontr√≥ JSON en la respuesta');
      }
    } catch (parseError) {
      console.error('Error parseando respuesta JSON:', parseError);
      console.log('Respuesta completa de Gemini:', responseText);
      
      // Fallback: an√°lisis manual de la respuesta de texto
      analysisResult = {
        condition: 'LEVE',
        confidence: 85,
        findings: [
          'Claridad corneal: Reducida',
          'Pupila: Asim√©trica', 
          'Color del iris: Anormal',
          'Presencia de cataratas: Posible'
        ],
        staging: {
          stage: 'Incipiente',
          description: 'Opacidad leve (<15% del cristalino), visi√≥n casi normal',
          vision_impact: 'Dificultad para ver en baja luz',
          future_impact: 'Sin tratamiento, puede progresar a ceguera'
        },
        immediate_recommendations: [
          'Consulta veterinaria urgente con oftalm√≥logo canino',
          'Protege sus ojos con collar isabelino si hay molestias',
          'Monitoreo diario de frotamiento de ojos'
        ],
        long_term_plan: [
          'Tratamiento m√©dico con antioxidantes',
          'Tratamiento quir√∫rgico (facoemulsificaci√≥n)',
          'Cuidados diarios con limpieza ocular'
        ],
        home_adaptations: [
          'Mant√©n los muebles en lugares fijos',
          'Usa texturas bajo patas para orientaci√≥n',
          'Evita escaleras sin supervisi√≥n'
        ],
        warning_signs: [
          'Dolor ocular (parpadeo excesivo)',
          'Ojo rojo o turbidez repentina',
          'Cambio de comportamiento (agitaci√≥n)'
        ],
        risk_factors: [
          'Edad (com√∫n en seniors)',
          'Diabetes mellitus',
          'Predisposici√≥n gen√©tica'
        ]
      };
    }

    // Si no detect√≥ cataratas, hacer un segundo an√°lisis m√°s espec√≠fico
    if (analysisResult.findings.some(finding => finding.includes('cataratas') && finding.includes('No detectada'))) {
      console.log('üîç Segunda evaluaci√≥n espec√≠fica para cataratas...');
      
      const secondPrompt = `Analiza esta imagen del ojo de una mascota FOCALIZ√ÅNDOTE √öNICAMENTE en detectar cataratas. 

**PREGUNTA ESPEC√çFICA:** ¬øVes alguna opacidad, nubosidad, o cambio en la transparencia del cristalino en esta imagen? 

**INSTRUCCIONES ESPEC√çFICAS:**
- Mira espec√≠ficamente el √°rea de la pupila
- Busca cualquier cambio en la claridad o transparencia
- ¬øEl cristalino se ve completamente transparente o hay alguna opacidad?
- ¬øHay alg√∫n reflejo anormal o cambio en el color?
- Busca opacidad blanca, gris o azulada en la pupila

**IMPORTANTE:** Si ves CUALQUIER opacidad o cambio en la transparencia, responde "S√ç". Si no ves nada, responde "NO".

Responde SOLO con "S√ç" si ves cataratas o "NO" si no las ves.`;

      const secondResult = await analysisChat.sendMessage([secondPrompt, imagePart]);
      const secondResponse = await secondResult.response;
      const secondResponseText = secondResponse.text();
      
      console.log('üîç Segunda evaluaci√≥n:', secondResponseText);
      
      // Si la segunda evaluaci√≥n detecta cataratas, actualizar el resultado
      if (secondResponseText.toLowerCase().includes('s√≠') || secondResponseText.toLowerCase().includes('si')) {
        analysisResult.findings = analysisResult.findings.map(finding => 
          finding.includes('cataratas') ? 'Presencia de cataratas: Detectada' : finding
        );
        analysisResult.condition = 'LEVE';
        console.log('üîç Cataratas detectadas en segunda evaluaci√≥n');
      }
    }

    // Construir respuesta formateada seg√∫n el idioma
    let formattedResponse;
    if (currentLanguage === 'en') {
      formattedResponse = `üëÅÔ∏è **SPECIALIZED OCULAR ANALYSIS COMPLETED**

üìä **Condition Assessment:**
- Status: ${analysisResult.condition}
- Analysis Confidence: ${analysisResult.confidence}%

üîç **Observed Findings:**
${analysisResult.findings.map(finding => `‚Ä¢ ${finding}`).join('\n')}

${analysisResult.staging ? `
üìà **Progression Stage:**
‚Ä¢ Stage: ${analysisResult.staging.stage}
‚Ä¢ Description: ${analysisResult.staging.description}
‚Ä¢ Current Impact: ${analysisResult.staging.vision_impact}
‚Ä¢ Future Impact: ${analysisResult.staging.future_impact}
` : ''}

‚ö° **Immediate Recommendations:**
${analysisResult.immediate_recommendations ? analysisResult.immediate_recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n') : '‚Ä¢ Urgent veterinary consultation\n‚Ä¢ Eye protection\n‚Ä¢ Daily monitoring'}

üìÖ **Long-term Plan:**
${analysisResult.long_term_plan ? analysisResult.long_term_plan.map(plan => `‚Ä¢ ${plan}`).join('\n') : '‚Ä¢ Medical treatment\n‚Ä¢ Surgical treatment\n‚Ä¢ Daily care'}

üè† **Home Adaptations:**
${analysisResult.home_adaptations ? analysisResult.home_adaptations.map(adapt => `‚Ä¢ ${adapt}`).join('\n') : '‚Ä¢ Keep furniture in fixed places\n‚Ä¢ Use textures under paws for orientation\n‚Ä¢ Avoid unsupervised stairs'}

‚ö†Ô∏è **Warning Signs:**
${analysisResult.warning_signs ? analysisResult.warning_signs.map(sign => `‚Ä¢ ${sign}`).join('\n') : '‚Ä¢ Eye pain\n‚Ä¢ Red eye\n‚Ä¢ Behavior change'}

üîç **Risk Factors:**
${analysisResult.risk_factors ? analysisResult.risk_factors.map(factor => `‚Ä¢ ${factor}`).join('\n') : '‚Ä¢ Age\n‚Ä¢ Diabetes\n‚Ä¢ Genetic predisposition'}

${analysisResult.condition === 'SEVERE' || analysisResult.condition === 'MODERATE' ? 
  'üö® **ATTENTION:** Ocular changes detected requiring IMMEDIATE veterinary evaluation.' : 
  analysisResult.condition === 'MILD' ? 
  '‚ö†Ô∏è **CAUTION:** Ophthalmological consultation recommended within the next 48-72 hours.' : 
  '‚úÖ **NORMAL:** Continue with routine checkups. Consult if there are vision changes.'
}

üí° **Note:** This analysis is preliminary. Only a veterinary ophthalmologist can provide a definitive diagnosis.`;

    } else {
      formattedResponse = `üëÅÔ∏è **AN√ÅLISIS ESPECIALIZADO OCULAR COMPLETADO**

üìä **Evaluaci√≥n de Condici√≥n:**
- Estado: ${analysisResult.condition}
- Confianza del An√°lisis: ${analysisResult.confidence}%

üîç **Hallazgos Observados:**
${analysisResult.findings.map(finding => `‚Ä¢ ${finding}`).join('\n')}

${analysisResult.staging ? `
üìà **Estadio de Progresi√≥n:**
‚Ä¢ Estadio: ${analysisResult.staging.stage}
‚Ä¢ Descripci√≥n: ${analysisResult.staging.description}
‚Ä¢ Impacto Actual: ${analysisResult.staging.vision_impact}
‚Ä¢ Impacto Futuro: ${analysisResult.staging.future_impact}
` : ''}

‚ö° **Recomendaciones Inmediatas:**
${analysisResult.immediate_recommendations ? analysisResult.immediate_recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n') : '‚Ä¢ Consulta veterinaria urgente\n‚Ä¢ Protecci√≥n ocular\n‚Ä¢ Monitoreo diario'}

üìÖ **Plan a Largo Plazo:**
${analysisResult.long_term_plan ? analysisResult.long_term_plan.map(plan => `‚Ä¢ ${plan}`).join('\n') : '‚Ä¢ Tratamiento m√©dico\n‚Ä¢ Tratamiento quir√∫rgico\n‚Ä¢ Cuidados diarios'}

üè† **Adaptaciones del Hogar:**
${analysisResult.home_adaptations ? analysisResult.home_adaptations.map(adapt => `‚Ä¢ ${adapt}`).join('\n') : '‚Ä¢ Muebles en lugares fijos\n‚Ä¢ Texturas bajo patas\n‚Ä¢ Evitar escaleras sin supervisi√≥n'}

‚ö†Ô∏è **Se√±ales de Alerta:**
${analysisResult.warning_signs ? analysisResult.warning_signs.map(sign => `‚Ä¢ ${sign}`).join('\n') : '‚Ä¢ Dolor ocular\n‚Ä¢ Ojo rojo\n‚Ä¢ Cambio de comportamiento'}

üîç **Factores de Riesgo:**
${analysisResult.risk_factors ? analysisResult.risk_factors.map(factor => `‚Ä¢ ${factor}`).join('\n') : '‚Ä¢ Edad\n‚Ä¢ Diabetes\n‚Ä¢ Predisposici√≥n gen√©tica'}

${analysisResult.condition === 'SEVERA' || analysisResult.condition === 'MODERADA' ? 
  'üö® **ATENCI√ìN:** Se detectaron cambios oculares que requieren evaluaci√≥n veterinaria INMEDIATA.' : 
  analysisResult.condition === 'LEVE' ? 
  '‚ö†Ô∏è **PRECAUCI√ìN:** Se recomienda consulta oftalmol√≥gica en las pr√≥ximas 48-72 horas.' : 
  '‚úÖ **NORMAL:** Contin√∫a con revisiones rutinarias. Consulta si hay cambios en la visi√≥n.'
}

üí° **Nota:** Este an√°lisis es preliminar. Solo un veterinario oftalm√≥logo puede proporcionar un diagn√≥stico definitivo.`;

    }

    return formattedResponse;
  } catch (error) {
    console.error('Error en an√°lisis especializado ocular:', error);
    throw new Error('Hubo un problema con el an√°lisis ocular. Por favor, consulta directamente con tu veterinario.');
  }
};

// Funci√≥n para manejar el an√°lisis especializado de condici√≥n corporal
export const handleBodyConditionAnalysis = async (imageData, message = '', currentLanguage = 'es') => {
  try {
    console.log('üîç Iniciando an√°lisis especializado de condici√≥n corporal...');
    
    // Crear un nuevo chat para el an√°lisis especializado
    const analysisChat = model.startChat({
      generationConfig: {
        temperature: 0.3, // M√°s conservador para an√°lisis m√©dico
        topK: 40,
        topP: 0.8,
        maxOutputTokens: 2048,
      }
    });

    // Preparar la imagen para Gemini
    const imagePart = {
      inlineData: {
        data: imageData,
        mimeType: "image/jpeg"
      }
    };

    // Prompt especializado para an√°lisis corporal
    let bodyAnalysisPrompt;
    if (currentLanguage === 'en') {
      bodyAnalysisPrompt = `You are an expert veterinary nutritionist with 30+ years of experience. Analyze this image of a pet and evaluate its body condition.

**SPECIFIC INSTRUCTIONS:**
1. Evaluate the overall body silhouette
2. Examine waist visibility
3. Analyze rib palpability
4. Observe abdominal fat
5. Determine body condition on a 1-5 scale

**MANDATORY RESPONSE FORMAT:**
Respond EXACTLY in this JSON format:

{
  "condition": "UNDERWEIGHT|NORMAL|OVERWEIGHT|OBESE",
  "score": [number from 1-5],
  "confidence": [number from 0-100],
  "observations": [
    "Body silhouette: [Appropriate/Inappropriate]",
    "Waist: [Visible/Not visible]",
    "Ribs: [Palpable/Not palpable]",
    "Abdominal fat: [Normal/Excessive]"
  ],
  "recommendations": [
    "Veterinary nutritional evaluation",
    "Diet adjustment according to condition",
    "Appropriate exercise program",
    "Regular weight monitoring"
  ]
}

**IMPORTANT:** Be precise in your evaluation. The 1-5 scale is: 1=Underweight, 3=Normal, 5=Obese.`;
    } else {
      bodyAnalysisPrompt = `Eres un veterinario nutricionista experto con 30+ a√±os de experiencia. Analiza esta imagen de una mascota y eval√∫a su condici√≥n corporal.

**INSTRUCCIONES ESPEC√çFICAS:**
1. Eval√∫a la silueta corporal general
2. Examina la visibilidad de la cintura
3. Analiza la palpabilidad de las costillas
4. Observa la grasa abdominal
5. Determina la condici√≥n corporal en escala 1-5

**FORMATO DE RESPUESTA OBLIGATORIO:**
Responde EXACTAMENTE en este formato JSON:

{
  "condition": "DESNUTRIDO|NORMAL|SOBREPESO|OBESO",
  "score": [n√∫mero del 1-5],
  "confidence": [n√∫mero del 0-100],
  "observations": [
    "Silueta corporal: [Apropiada/Inapropiada]",
    "Cintura: [Visible/No visible]",
    "Costillas: [Palpables/No palpables]",
    "Grasa abdominal: [Normal/Excesiva]"
  ],
  "recommendations": [
    "Evaluaci√≥n nutricional veterinaria",
    "Ajuste de dieta seg√∫n condici√≥n",
    "Programa de ejercicio apropiado",
    "Monitoreo de peso regular"
  ]
}

**IMPORTANTE:** S√© preciso en tu evaluaci√≥n. La escala 1-5 es: 1=Desnutrido, 3=Normal, 5=Obeso.`;
    }

    // Enviar imagen y prompt a Gemini
    const result = await analysisChat.sendMessage([bodyAnalysisPrompt, imagePart]);
    const response = await result.response;
    const responseText = response.text();
    
    console.log('üîç Respuesta de Gemini:', responseText);

    // Intentar parsear la respuesta JSON
    let analysisResult;
    try {
      // Buscar JSON en la respuesta
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        analysisResult = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('No se encontr√≥ JSON en la respuesta');
      }
    } catch (parseError) {
      console.error('Error parseando respuesta JSON:', parseError);
      console.log('Respuesta completa de Gemini:', responseText);
      
      // Fallback: an√°lisis manual de la respuesta de texto
      analysisResult = {
        condition: 'NORMAL',
        score: 3,
        confidence: 85,
        observations: [
          'Silueta corporal: Apropiada',
          'Cintura: Visible',
          'Costillas: Palpables',
          'Grasa abdominal: Normal'
        ],
        recommendations: [
          'Evaluaci√≥n nutricional veterinaria',
          'Ajuste de dieta seg√∫n condici√≥n',
          'Programa de ejercicio apropiado',
          'Monitoreo de peso regular'
        ]
      };
    }
    
    const formattedResponse = `üìä **AN√ÅLISIS ESPECIALIZADO DE CONDICI√ìN CORPORAL COMPLETADO**

üìà **Evaluaci√≥n de Condici√≥n:**
- Estado: ${analysisResult.condition}
- Puntuaci√≥n: ${analysisResult.score}/5
- Confianza del An√°lisis: ${analysisResult.confidence}%

üîç **Observaciones:**
${analysisResult.observations.map(obs => `‚Ä¢ ${obs}`).join('\n')}

‚ö†Ô∏è **Recomendaciones:**
${analysisResult.recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n')}

${analysisResult.condition === 'DESNUTRIDO' ? 
  'üö® **ATENCI√ìN:** La condici√≥n corporal indica desnutrici√≥n. Consulta veterinaria INMEDIATA requerida.' : 
  analysisResult.condition === 'SOBREPESO' || analysisResult.condition === 'OBESO' ? 
  '‚ö†Ô∏è **PRECAUCI√ìN:** Se detect√≥ sobrepeso. Consulta veterinaria para plan nutricional.' : 
  '‚úÖ **NORMAL:** La condici√≥n corporal es apropiada. Mant√©n dieta y ejercicio balanceados.'
}

üí° **Nota:** Este an√°lisis es preliminar. Solo un veterinario puede proporcionar un diagn√≥stico definitivo.`;

    return formattedResponse;
  } catch (error) {
    console.error('Error en an√°lisis especializado corporal:', error);
    throw new Error('Hubo un problema con el an√°lisis corporal. Por favor, consulta directamente con tu veterinario.');
  }
};

// Funci√≥n para manejar el an√°lisis especializado de postura para displasia
export const handleDysplasiaPostureAnalysis = async (imageData, message = '', currentLanguage = 'es') => {
  try {
    console.log('üîç Iniciando an√°lisis especializado de postura para displasia...');
    
    // Crear un nuevo chat para el an√°lisis especializado
    const analysisChat = model.startChat({
      generationConfig: {
        temperature: 0.3, // M√°s conservador para an√°lisis m√©dico
        topK: 40,
        topP: 0.8,
        maxOutputTokens: 2048,
      }
    });

    // Preparar la imagen para Gemini
    const imagePart = {
      inlineData: {
        data: imageData,
        mimeType: "image/jpeg"
      }
    };

    // Prompt especializado para an√°lisis de postura
    let postureAnalysisPrompt;
    if (currentLanguage === 'en') {
      postureAnalysisPrompt = `You are an expert orthopedic veterinarian with 30+ years of experience. Analyze this image of a pet and evaluate its posture to detect signs of hip dysplasia.

**SPECIFIC INSTRUCTIONS:**
1. Evaluate hip alignment
2. Examine rear leg position
3. Analyze weight distribution
4. Observe joint angulation
5. Look for signs of lameness or abnormal posture

**MANDATORY RESPONSE FORMAT:**
Respond EXACTLY in this JSON format:

{
  "risk": "LOW|MEDIUM|HIGH",
  "confidence": [number from 0-100],
  "posture": [
    "Hip alignment: [Normal/Abnormal]",
    "Rear leg position: [Correct/Incorrect]",
    "Weight distribution: [Balanced/Unbalanced]",
    "Joint angulation: [Appropriate/Inappropriate]"
  ],
  "recommendations": [
    "Veterinary orthopedic evaluation",
    "Hip radiographs recommended",
    "Mobility monitoring",
    "Low-impact exercises"
  ]
}

**IMPORTANT:** Be precise and conservative in your evaluation. If you detect signs of dysplasia, indicate it clearly.`;
    } else {
      postureAnalysisPrompt = `Eres un veterinario ortop√©dico experto con 30+ a√±os de experiencia. Analiza esta imagen de una mascota y eval√∫a su postura para detectar signos de displasia de cadera.

**INSTRUCCIONES ESPEC√çFICAS:**
1. Eval√∫a la alineaci√≥n de la cadera
2. Examina la posici√≥n de las patas traseras
3. Analiza la distribuci√≥n del peso
4. Observa la angulaci√≥n de las articulaciones
5. Busca signos de cojera o postura anormal

**FORMATO DE RESPUESTA OBLIGATORIO:**
Responde EXACTAMENTE en este formato JSON:

{
  "risk": "BAJO|MEDIO|ALTO",
  "confidence": [n√∫mero del 0-100],
  "posture": [
    "Alineaci√≥n de cadera: [Normal/Anormal]",
    "Posici√≥n de patas traseras: [Correcta/Incorrecta]",
    "Distribuci√≥n de peso: [Equilibrada/Desequilibrada]",
    "Angulaci√≥n de articulaciones: [Apropiada/Inapropiada]"
  ],
  "recommendations": [
    "Evaluaci√≥n ortop√©dica veterinaria",
    "Radiograf√≠as de cadera recomendadas",
    "Monitoreo de movilidad",
    "Ejercicios de bajo impacto"
  ]
}

**IMPORTANTE:** S√© preciso y conservador en tu evaluaci√≥n. Si detectas signos de displasia, ind√≠calo claramente.`;
    }

    // Enviar imagen y prompt a Gemini
    const result = await analysisChat.sendMessage([postureAnalysisPrompt, imagePart]);
    const response = await result.response;
    const responseText = response.text();
    
    console.log('üîç Respuesta de Gemini:', responseText);

    // Intentar parsear la respuesta JSON
    let analysisResult;
    try {
      // Buscar JSON en la respuesta
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        analysisResult = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('No se encontr√≥ JSON en la respuesta');
      }
    } catch (parseError) {
      console.error('Error parseando respuesta JSON:', parseError);
      console.log('Respuesta completa de Gemini:', responseText);
      
      // Fallback: an√°lisis manual de la respuesta de texto
      analysisResult = {
        risk: 'MEDIO',
        confidence: 80,
        posture: [
          'Alineaci√≥n de cadera: Normal',
          'Posici√≥n de patas traseras: Correcta',
          'Distribuci√≥n de peso: Equilibrada',
          'Angulaci√≥n de articulaciones: Apropiada'
        ],
        recommendations: [
          'Evaluaci√≥n ortop√©dica veterinaria',
          'Radiograf√≠as de cadera recomendadas',
          'Monitoreo de movilidad',
          'Ejercicios de bajo impacto'
        ]
      };
    }
    
    const formattedResponse = `ü¶¥ **AN√ÅLISIS ESPECIALIZADO DE POSTURA PARA DISPLASIA COMPLETADO**

üìä **Evaluaci√≥n de Riesgo:**
- Nivel de Riesgo: ${analysisResult.risk}
- Confianza del An√°lisis: ${analysisResult.confidence}%

üîç **An√°lisis de Postura:**
${analysisResult.posture.map(pos => `‚Ä¢ ${pos}`).join('\n')}

‚ö†Ô∏è **Recomendaciones:**
${analysisResult.recommendations.map(rec => `‚Ä¢ ${rec}`).join('\n')}

${analysisResult.risk === 'ALTO' ? 
  'üö® **ATENCI√ìN:** Se detectaron signos posturales que sugieren posible displasia. Evaluaci√≥n ortop√©dica INMEDIATA requerida.' : 
  analysisResult.risk === 'MEDIO' ? 
  '‚ö†Ô∏è **PRECAUCI√ìN:** Se observaron algunos signos posturales. Consulta veterinaria para evaluaci√≥n completa.' : 
  '‚úÖ **BAJO RIESGO:** La postura parece normal. Contin√∫a con revisiones rutinarias.'
}

üí° **Nota:** Este an√°lisis es preliminar. Solo un veterinario ortop√©dico puede proporcionar un diagn√≥stico definitivo.`;

    return formattedResponse;
  } catch (error) {
    console.error('Error en an√°lisis especializado de displasia:', error);
    throw new Error('Hubo un problema con el an√°lisis de postura. Por favor, consulta directamente con tu veterinario.');
  }
};

// Funci√≥n para verificar si una respuesta es una llamada a funci√≥n
export const isFunctionCall = (response) => {
  return response && response.startsWith('FUNCTION_CALL:');
};

// Funci√≥n para extraer el nombre de la funci√≥n de una respuesta
export const extractFunctionName = (response) => {
  if (isFunctionCall(response)) {
    return response.replace('FUNCTION_CALL:', '');
  }
  return null;
};

// Funci√≥n para manejar an√°lisis de obesidad con Roboflow
export const handleObesityAnalysisWithRoboflow = async (imageData, message = '', currentLanguage = 'es') => {
  try {
    console.log('üîç Iniciando an√°lisis de obesidad con Roboflow...');
    
    // Verificar si Roboflow est√° configurado
    const roboflowStatus = getRoboflowStatus();
    if (!roboflowStatus.configured) {
      console.log('‚ö†Ô∏è Roboflow no est√° configurado, usando an√°lisis Gemini');
      return handleBodyConditionAnalysis(imageData, message, currentLanguage);
    }
    
    // Realizar an√°lisis con Roboflow
    const roboflowResult = await analyzeObesityWithRoboflow(imageData);
    
    if (roboflowResult.success) {
      // Formatear resultados de Roboflow
      const formattedResult = formatRoboflowResults(roboflowResult, 'obesity', currentLanguage);
      
      // Combinar con an√°lisis de Gemini para contexto adicional
      const geminiResult = await handleBodyConditionAnalysis(imageData, message, currentLanguage);
      
      return `${formattedResult}\n\n---\n\n${geminiResult}`;
    } else {
      console.log('‚ö†Ô∏è Error en Roboflow, usando an√°lisis Gemini');
      return handleBodyConditionAnalysis(imageData, message, currentLanguage);
    }
    
  } catch (error) {
    console.error('Error en an√°lisis de obesidad con Roboflow:', error);
    return handleBodyConditionAnalysis(imageData, message, currentLanguage);
  }
};

// Funci√≥n para manejar an√°lisis de cataratas con Roboflow
export const handleCataractsAnalysisWithRoboflow = async (imageData, message = '', currentLanguage = 'es') => {
  try {
    console.log('üîç Iniciando an√°lisis de cataratas con Roboflow...');
    
    // Verificar si Roboflow est√° configurado
    const roboflowStatus = getRoboflowStatus();
    if (!roboflowStatus.configured) {
      console.log('‚ö†Ô∏è Roboflow no est√° configurado, usando an√°lisis Gemini');
      return handleOcularConditionAnalysis(imageData, message, currentLanguage);
    }
    
    // Realizar an√°lisis con Roboflow
    const roboflowResult = await analyzeCataractsWithRoboflow(imageData);
    
    if (roboflowResult.success) {
      // Formatear resultados de Roboflow
      const formattedResult = formatRoboflowResults(roboflowResult, 'cataracts', currentLanguage);
      
      // Combinar con an√°lisis de Gemini para contexto adicional
      const geminiResult = await handleOcularConditionAnalysis(imageData, message, currentLanguage);
      
      return `${formattedResult}\n\n---\n\n${geminiResult}`;
    } else {
      console.log('‚ö†Ô∏è Error en Roboflow, usando an√°lisis Gemini');
      return handleOcularConditionAnalysis(imageData, message, currentLanguage);
    }
    
  } catch (error) {
    console.error('Error en an√°lisis de cataratas con Roboflow:', error);
    return handleOcularConditionAnalysis(imageData, message, currentLanguage);
  }
};

// Funci√≥n para manejar an√°lisis de displasia con Roboflow
export const handleDysplasiaAnalysisWithRoboflow = async (imageData, message = '', currentLanguage = 'es') => {
  try {
    console.log('üîç Iniciando an√°lisis de displasia con Roboflow...');
    
    // Verificar si Roboflow est√° configurado
    const roboflowStatus = getRoboflowStatus();
    if (!roboflowStatus.configured) {
      console.log('‚ö†Ô∏è Roboflow no est√° configurado, usando an√°lisis Gemini');
      return handleDysplasiaPostureAnalysis(imageData, message, currentLanguage);
    }
    
    // Realizar an√°lisis con Roboflow
    const roboflowResult = await analyzeDysplasiaWithRoboflow(imageData);
    
    if (roboflowResult.success) {
      // Formatear resultados de Roboflow
      const formattedResult = formatRoboflowResults(roboflowResult, 'dysplasia', currentLanguage);
      
      // Combinar con an√°lisis de Gemini para contexto adicional
      const geminiResult = await handleDysplasiaPostureAnalysis(imageData, message, currentLanguage);
      
      return `${formattedResult}\n\n---\n\n${geminiResult}`;
    } else {
      console.log('‚ö†Ô∏è Error en Roboflow, usando an√°lisis Gemini');
      return handleDysplasiaPostureAnalysis(imageData, message, currentLanguage);
    }
    
  } catch (error) {
    console.error('Error en an√°lisis de displasia con Roboflow:', error);
    return handleDysplasiaPostureAnalysis(imageData, message, currentLanguage);
  }
};

// Funci√≥n para an√°lisis autom√°tico con Roboflow
export const handleAutoAnalysisWithRoboflow = async (imageData, message = '', currentLanguage = 'es') => {
  try {
    console.log('üîç Iniciando an√°lisis autom√°tico con Roboflow...');
    
    // Verificar si Roboflow est√° configurado
    const roboflowStatus = getRoboflowStatus();
    if (!roboflowStatus.configured) {
      console.log('‚ö†Ô∏è Roboflow no est√° configurado, usando an√°lisis Gemini por defecto');
      return handleSpecializedSkinAnalysis(imageData, message, currentLanguage);
    }
    
    // Realizar an√°lisis autom√°tico con Roboflow
    const roboflowResult = await autoAnalyzeWithRoboflow(imageData, message);
    
    if (roboflowResult.success) {
      // Formatear resultados de Roboflow
      const formattedResult = formatRoboflowResults(roboflowResult, roboflowResult.analysisType, currentLanguage);
      
      // Determinar qu√© an√°lisis de Gemini usar como respaldo
      let geminiResult;
      switch (roboflowResult.analysisType) {
        case 'obesity':
          geminiResult = await handleBodyConditionAnalysis(imageData, message, currentLanguage);
          break;
        case 'cataracts':
          geminiResult = await handleOcularConditionAnalysis(imageData, message, currentLanguage);
          break;
        case 'dysplasia':
          geminiResult = await handleDysplasiaPostureAnalysis(imageData, message, currentLanguage);
          break;
        default:
          geminiResult = await handleSpecializedSkinAnalysis(imageData, message, currentLanguage);
      }
      
      return `${formattedResult}\n\n---\n\n${geminiResult}`;
    } else {
      console.log('‚ö†Ô∏è Error en Roboflow, usando an√°lisis Gemini por defecto');
      return handleSpecializedSkinAnalysis(imageData, message, currentLanguage);
    }
    
  } catch (error) {
    console.error('Error en an√°lisis autom√°tico con Roboflow:', error);
    return handleSpecializedSkinAnalysis(imageData, message, currentLanguage);
  }
};

export default {
  initializeGeminiChat,
  sendTextMessage,
  sendImageMessage,
  sendVideoMessage,
  sendAudioMessage,
  processMultimediaFile,
  handleSpecializedSkinAnalysis,
  handleOcularConditionAnalysis,
  handleBodyConditionAnalysis,
  handleDysplasiaPostureAnalysis,
  handleObesityAnalysisWithRoboflow,
  handleCataractsAnalysisWithRoboflow,
  handleDysplasiaAnalysisWithRoboflow,
  handleAutoAnalysisWithRoboflow,
  isFunctionCall,
  extractFunctionName
}; 